/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eu.sergiolopes.nbp.filetype.conf;

import static eu.sergiolopes.nbp.filetype.conf.ConfLanguage.ICON_STRING_BASE;
import eu.sergiolopes.nbp.filetype.conf.visualconfs.ConfFileUpdater;
import eu.sergiolopes.nbp.filetype.conf.visualconfs.JDBCDriverEnum;
import eu.sergiolopes.nbp.filetype.conf.visualconfs.JDBCHelper;
import eu.sergiolopes.nbp.filetype.conf.visualconfs.dto.ConfConnectionDTO;
import eu.sergiolopes.nbp.project.PlayProjectUtil;
import static eu.sergiolopes.nbp.project.PlayProjectUtil.UTF_8;
import eu.sergiolopes.nbp.util.ExceptionManager;
import eu.sergiolopes.nbp.util.MiscUtil;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.SQLException;
import java.util.Optional;
import javax.swing.Action;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.filesystems.FileObject;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

@MultiViewElement.Registration(
        displayName = "#LBL_Conf_VISUAL",
        iconBase = ICON_STRING_BASE,
        mimeType = "text/x-conf",
        persistenceType = TopComponent.PERSISTENCE_NEVER,
        preferredID = "ConfVisual",
        position = 2000
)
@Messages("LBL_Conf_VISUAL=Visual")
public final class ConfVisualElement extends JPanel implements MultiViewElement {

    private ConfDataObject obj;
    private JToolBar toolbar = new JToolBar();
    private transient MultiViewElementCallback callback;

    public ConfVisualElement(Lookup lkp) {
        obj = lkp.lookup(ConfDataObject.class);
        assert obj != null;
        initComponents();
        myOwnInitComponents();
    }

    @Override
    public String getName() {
        return "ConfVisualElement";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        databasePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cbxJDBCDriver = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtURL = new javax.swing.JTextField();
        txtUsername = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDatabaseName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtHost = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtPort = new javax.swing.JFormattedTextField();
        btnTestConnection = new javax.swing.JButton();
        lblConnectionResult = new javax.swing.JLabel();
        btnSaveChanges = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ConfVisualElement.class, "ConfVisualElement.jLabel1.text")); // NOI18N

        cbxJDBCDriver.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxJDBCDriver.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxJDBCDriverItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ConfVisualElement.class, "ConfVisualElement.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(ConfVisualElement.class, "ConfVisualElement.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(ConfVisualElement.class, "ConfVisualElement.jLabel4.text")); // NOI18N

        txtURL.setEditable(false);

        txtUsername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUsernameKeyReleased(evt);
            }
        });

        txtPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPasswordKeyReleased(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(ConfVisualElement.class, "ConfVisualElement.jLabel5.text")); // NOI18N

        txtDatabaseName.setText(org.openide.util.NbBundle.getMessage(ConfVisualElement.class, "ConfVisualElement.txtDatabaseName.text")); // NOI18N
        txtDatabaseName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDatabaseNameKeyReleased(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(ConfVisualElement.class, "ConfVisualElement.jLabel6.text")); // NOI18N

        txtHost.setText("localhost");
        txtHost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtHostKeyReleased(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(ConfVisualElement.class, "ConfVisualElement.jLabel7.text")); // NOI18N

        txtPort.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPortKeyReleased(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnTestConnection, org.openide.util.NbBundle.getMessage(ConfVisualElement.class, "ConfVisualElement.btnTestConnection.text")); // NOI18N
        btnTestConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestConnectionActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lblConnectionResult, org.openide.util.NbBundle.getMessage(ConfVisualElement.class, "ConfVisualElement.lblConnectionResult.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnSaveChanges, org.openide.util.NbBundle.getMessage(ConfVisualElement.class, "ConfVisualElement.btnSaveChanges.text")); // NOI18N
        btnSaveChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveChangesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout databasePanelLayout = new javax.swing.GroupLayout(databasePanel);
        databasePanel.setLayout(databasePanelLayout);
        databasePanelLayout.setHorizontalGroup(
            databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(databasePanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblConnectionResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbxJDBCDriver, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtURL)
                    .addComponent(txtUsername)
                    .addComponent(txtPassword)
                    .addComponent(txtDatabaseName)
                    .addGroup(databasePanelLayout.createSequentialGroup()
                        .addComponent(txtHost, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(databasePanelLayout.createSequentialGroup()
                        .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSaveChanges)
                            .addComponent(btnTestConnection))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        databasePanelLayout.setVerticalGroup(
            databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(databasePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbxJDBCDriver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(txtDatabaseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(txtHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(databasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(btnTestConnection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSaveChanges)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblConnectionResult)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Database", databasePanel);
        databasePanel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(ConfVisualElement.class, "ConfVisualElement.databasePanel.AccessibleContext.accessibleName")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane)
                .addContainerGap())
        );

        tabbedPane.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(ConfVisualElement.class, "ConfVisualElement.tabbedPane.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void txtDatabaseNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDatabaseNameKeyReleased
        updateUrl();
    }//GEN-LAST:event_txtDatabaseNameKeyReleased

    private void txtHostKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHostKeyReleased
        updateUrl();
    }//GEN-LAST:event_txtHostKeyReleased

    private void txtPortKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPortKeyReleased
        updateUrl();
    }//GEN-LAST:event_txtPortKeyReleased

    private void cbxJDBCDriverItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxJDBCDriverItemStateChanged
        updateUrl();
    }//GEN-LAST:event_cbxJDBCDriverItemStateChanged

    private void btnTestConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestConnectionActionPerformed
        FileObject fo = obj.getPrimaryFile();
        JDBCDriverEnum jDBCDriverEnum = (JDBCDriverEnum) cbxJDBCDriver.getSelectedItem();

        try {
            JDBCHelper.connect(fo, jDBCDriverEnum, getCurrentURL(),
                    txtUsername.getText(), txtPassword.getText());

            lblConnectionResult.setText("Connection succeded!");
        } catch (ClassNotFoundException ex) {
            lblConnectionResult.setText("<html>Error: " + ex.getMessage() + "." + MiscUtil.LINE_SEPARATOR
                    + " The JDBC Driver couldn't be found in your project classpath, "
                    + "make sure you add it to the build.sbt file</html>");
        } catch (SQLException ex) {
            lblConnectionResult.setText("<html>Error: " + ex.getMessage()+"</html>");
        }


    }//GEN-LAST:event_btnTestConnectionActionPerformed

    private void btnSaveChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveChangesActionPerformed
        FileObject primaryFileObject = obj.getPrimaryFile();
        JDBCDriverEnum jDBCDriverEnum = (JDBCDriverEnum) cbxJDBCDriver.getSelectedItem();

        try {
            String fileContent = primaryFileObject.asText(PlayProjectUtil.UTF_8);

            ConfConnectionDTO dto = new ConfConnectionDTO();
            dto.driverName = jDBCDriverEnum.driverName;
            dto.url = getCurrentURL();
            dto.username = txtUsername.getText();
            dto.password = txtPassword.getText();

            String updatedConnectionInfoContent = ConfFileUpdater.getUpdatedConnectionInfoContent(dto, fileContent);

            Files.write(Paths.get(primaryFileObject.toURI()), updatedConnectionInfoContent.getBytes());
            markAsSaved(true);
        } catch (IOException ex) {
            ExceptionManager.logException(ex);
        }

    }//GEN-LAST:event_btnSaveChangesActionPerformed

    private void txtUsernameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUsernameKeyReleased
        markAsSaved(false);
    }//GEN-LAST:event_txtUsernameKeyReleased

    private void txtPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPasswordKeyReleased
        markAsSaved(false);
    }//GEN-LAST:event_txtPasswordKeyReleased

    private void markAsSaved(boolean isSaved) {
        if (isSaved) {
            tabbedPane.setTitleAt(0, tabbedPane.getTitleAt(0).replace("* ", ""));
        } else {
            String title = tabbedPane.getTitleAt(0);
            if (!title.contains("*")) {
                tabbedPane.setTitleAt(0, "* " + title);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSaveChanges;
    private javax.swing.JButton btnTestConnection;
    private javax.swing.JComboBox<String> cbxJDBCDriver;
    private javax.swing.JPanel databasePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel lblConnectionResult;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTextField txtDatabaseName;
    private javax.swing.JTextField txtHost;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JFormattedTextField txtPort;
    private javax.swing.JTextField txtURL;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return new Action[0];
    }

    @Override
    public Lookup getLookup() {
        return obj.getLookup();
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void componentShowing() {
    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }

    private void myOwnInitComponents() {
        DefaultComboBoxModel cbxModel = new DefaultComboBoxModel(JDBCDriverEnum.values());
        cbxJDBCDriver.setModel(cbxModel);

        try {
            ConfConnectionDTO dto = ConfFileUpdater.getConfConnectionDTO(
                    obj.getPrimaryFile().asText(UTF_8));

            if (dto.driverName != null) {
                Optional<JDBCDriverEnum> jDBCDriverEnumOptional = JDBCDriverEnum.getByDriverName(dto.driverName);
                if (jDBCDriverEnumOptional.isPresent()) {
                    cbxJDBCDriver.setSelectedItem(jDBCDriverEnumOptional.get());
                }
            }

            if (dto.url != null) {
                txtDatabaseName.setText(ConfFileUpdater.getDatabaseNameFromUrl(dto.url).orElse(""));
                txtHost.setText(ConfFileUpdater.getHostFromUrl(dto.url).orElse(""));
                txtPort.setText(ConfFileUpdater.getPortFromUrl(dto.url).orElse(""));
            }
            txtUsername.setText(dto.username);
            txtPassword.setText(dto.password);

            updateUrl();
            markAsSaved(true);
        } catch (IOException ex) {
            ExceptionManager.logException(ex);
        }
    }

    private void updateUrl() {
        txtURL.setText(getCurrentURL());
        markAsSaved(false);
    }

    private String getCurrentURL() {
        String database = txtDatabaseName.getText();
        String host = txtHost.getText();
        Optional<String> portOptional = txtPort.getText().isEmpty() ? Optional.empty() : Optional.of(txtPort.getText());
        return ((JDBCDriverEnum) cbxJDBCDriver.getSelectedItem()).getUrl(host, portOptional, database);
    }

}
