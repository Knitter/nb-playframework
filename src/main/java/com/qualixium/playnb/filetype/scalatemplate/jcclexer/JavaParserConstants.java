/* Generated By:JavaCC: Do not edit this line. JavaParserConstants.java */
package com.qualixium.playnb.filetype.scalatemplate.jcclexer;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int AT = 2;
  /** RegularExpression Id. */
  int FOR = 3;
  /** RegularExpression Id. */
  int IF = 4;
  /** RegularExpression Id. */
  int ELSE = 5;
  /** RegularExpression Id. */
  int MATCH = 6;
  /** RegularExpression Id. */
  int VAL = 7;
  /** RegularExpression Id. */
  int VAR = 8;
  /** RegularExpression Id. */
  int DEFINING = 9;
  /** RegularExpression Id. */
  int IMPORT = 10;
  /** RegularExpression Id. */
  int HTML = 11;
  /** RegularExpression Id. */
  int HELPER = 12;
  /** RegularExpression Id. */
  int BOOLEAN = 13;
  /** RegularExpression Id. */
  int BYTE = 14;
  /** RegularExpression Id. */
  int CHAR = 15;
  /** RegularExpression Id. */
  int FALSE = 16;
  /** RegularExpression Id. */
  int INT = 17;
  /** RegularExpression Id. */
  int LONG = 18;
  /** RegularExpression Id. */
  int FLOAT = 19;
  /** RegularExpression Id. */
  int DOUBLE = 20;
  /** RegularExpression Id. */
  int SHORT = 21;
  /** RegularExpression Id. */
  int TRUE = 22;
  /** RegularExpression Id. */
  int INPUTTEXT = 23;
  /** RegularExpression Id. */
  int CHECKBOX = 24;
  /** RegularExpression Id. */
  int SELECT = 25;
  /** RegularExpression Id. */
  int TEXTAREA = 26;
  /** RegularExpression Id. */
  int INPUTRADIOGROUP = 27;
  /** RegularExpression Id. */
  int INPUTDATE = 28;
  /** RegularExpression Id. */
  int INPUTPASSWORD = 29;
  /** RegularExpression Id. */
  int INPUTFILE = 30;
  /** RegularExpression Id. */
  int FORM = 31;
  /** RegularExpression Id. */
  int INPUT = 32;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 33;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 34;
  /** RegularExpression Id. */
  int HEX_LITERAL = 35;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 36;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 37;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 38;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 39;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 40;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 41;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 42;
  /** RegularExpression Id. */
  int STRING_LITERAL = 43;
  /** RegularExpression Id. */
  int IDENTIFIER = 44;
  /** RegularExpression Id. */
  int LETTER = 45;
  /** RegularExpression Id. */
  int PART_LETTER = 46;
  /** RegularExpression Id. */
  int LPAREN = 47;
  /** RegularExpression Id. */
  int RPAREN = 48;
  /** RegularExpression Id. */
  int LBRACE = 49;
  /** RegularExpression Id. */
  int RBRACE = 50;
  /** RegularExpression Id. */
  int LBRACKET = 51;
  /** RegularExpression Id. */
  int RBRACKET = 52;
  /** RegularExpression Id. */
  int SEMICOLON = 53;
  /** RegularExpression Id. */
  int COMMA = 54;
  /** RegularExpression Id. */
  int DOT = 55;
  /** RegularExpression Id. */
  int ASSIGN = 56;
  /** RegularExpression Id. */
  int LT = 57;
  /** RegularExpression Id. */
  int BANG = 58;
  /** RegularExpression Id. */
  int TILDE = 59;
  /** RegularExpression Id. */
  int HOOK = 60;
  /** RegularExpression Id. */
  int COLON = 61;
  /** RegularExpression Id. */
  int EQ = 62;
  /** RegularExpression Id. */
  int LE = 63;
  /** RegularExpression Id. */
  int GE = 64;
  /** RegularExpression Id. */
  int NE = 65;
  /** RegularExpression Id. */
  int SC_OR = 66;
  /** RegularExpression Id. */
  int SC_AND = 67;
  /** RegularExpression Id. */
  int INCR = 68;
  /** RegularExpression Id. */
  int DECR = 69;
  /** RegularExpression Id. */
  int PLUS = 70;
  /** RegularExpression Id. */
  int MINUS = 71;
  /** RegularExpression Id. */
  int STAR = 72;
  /** RegularExpression Id. */
  int SLASH = 73;
  /** RegularExpression Id. */
  int BIT_AND = 74;
  /** RegularExpression Id. */
  int BIT_OR = 75;
  /** RegularExpression Id. */
  int XOR = 76;
  /** RegularExpression Id. */
  int REM = 77;
  /** RegularExpression Id. */
  int LSHIFT = 78;
  /** RegularExpression Id. */
  int PLUSASSIGN = 79;
  /** RegularExpression Id. */
  int MINUSASSIGN = 80;
  /** RegularExpression Id. */
  int STARASSIGN = 81;
  /** RegularExpression Id. */
  int SLASHASSIGN = 82;
  /** RegularExpression Id. */
  int ANDASSIGN = 83;
  /** RegularExpression Id. */
  int ORASSIGN = 84;
  /** RegularExpression Id. */
  int XORASSIGN = 85;
  /** RegularExpression Id. */
  int REMASSIGN = 86;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 87;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 88;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 89;
  /** RegularExpression Id. */
  int ELLIPSIS = 90;
  /** RegularExpression Id. */
  int HASH = 91;
  /** RegularExpression Id. */
  int BAD_QUOTE = 92;
  /** RegularExpression Id. */
  int BAD_QUOTE_2 = 93;
  /** RegularExpression Id. */
  int SINGLE_QUOTE = 94;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "\"@\"",
    "\"for\"",
    "\"if\"",
    "\"else\"",
    "\"match\"",
    "\"val\"",
    "\"var\"",
    "\"defining\"",
    "\"import\"",
    "\"Html\"",
    "\"helper\"",
    "\"Boolean\"",
    "\"Byte\"",
    "\"Char\"",
    "\"False\"",
    "\"Int\"",
    "\"Long\"",
    "\"Float\"",
    "\"Double\"",
    "\"Short\"",
    "\"True\"",
    "\"inputText\"",
    "\"checkbox\"",
    "\"select\"",
    "\"textarea\"",
    "\"inputRadioGroup\"",
    "\"inputDate\"",
    "\"inputPassword\"",
    "\"inputFile\"",
    "\"form\"",
    "\"input\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"...\"",
    "\"#\"",
    "\"`\"",
    "\"\\u2019\"",
    "\"\\\'\"",
    "<token of kind 95>",
  };

}
