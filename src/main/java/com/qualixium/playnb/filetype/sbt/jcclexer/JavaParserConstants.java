/* Generated By:JavaCC: Do not edit this line. JavaParserConstants.java */
package com.qualixium.playnb.filetype.sbt.jcclexer;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 4;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 5;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int ABSTRACT = 8;
  /** RegularExpression Id. */
  int ASSERT = 9;
  /** RegularExpression Id. */
  int BOOLEAN = 10;
  /** RegularExpression Id. */
  int BREAK = 11;
  /** RegularExpression Id. */
  int BYTE = 12;
  /** RegularExpression Id. */
  int CASE = 13;
  /** RegularExpression Id. */
  int CATCH = 14;
  /** RegularExpression Id. */
  int CHAR = 15;
  /** RegularExpression Id. */
  int CLASS = 16;
  /** RegularExpression Id. */
  int CONST = 17;
  /** RegularExpression Id. */
  int CONTINUE = 18;
  /** RegularExpression Id. */
  int DEF = 19;
  /** RegularExpression Id. */
  int _DEFAULT = 20;
  /** RegularExpression Id. */
  int DO = 21;
  /** RegularExpression Id. */
  int DOUBLE = 22;
  /** RegularExpression Id. */
  int ELSE = 23;
  /** RegularExpression Id. */
  int ENUM = 24;
  /** RegularExpression Id. */
  int EXTENDS = 25;
  /** RegularExpression Id. */
  int FALSE = 26;
  /** RegularExpression Id. */
  int FINAL = 27;
  /** RegularExpression Id. */
  int FINALLY = 28;
  /** RegularExpression Id. */
  int FLOAT = 29;
  /** RegularExpression Id. */
  int FOR = 30;
  /** RegularExpression Id. */
  int GOTO = 31;
  /** RegularExpression Id. */
  int IF = 32;
  /** RegularExpression Id. */
  int IMPLEMENTS = 33;
  /** RegularExpression Id. */
  int IMPORT = 34;
  /** RegularExpression Id. */
  int INSTANCEOF = 35;
  /** RegularExpression Id. */
  int INT = 36;
  /** RegularExpression Id. */
  int INTERFACE = 37;
  /** RegularExpression Id. */
  int LONG = 38;
  /** RegularExpression Id. */
  int NATIVE = 39;
  /** RegularExpression Id. */
  int NEW = 40;
  /** RegularExpression Id. */
  int NULL = 41;
  /** RegularExpression Id. */
  int PACKAGE = 42;
  /** RegularExpression Id. */
  int PRIVATE = 43;
  /** RegularExpression Id. */
  int PROTECTED = 44;
  /** RegularExpression Id. */
  int PUBLIC = 45;
  /** RegularExpression Id. */
  int RETURN = 46;
  /** RegularExpression Id. */
  int SHORT = 47;
  /** RegularExpression Id. */
  int STATIC = 48;
  /** RegularExpression Id. */
  int STRICTFP = 49;
  /** RegularExpression Id. */
  int SUPER = 50;
  /** RegularExpression Id. */
  int SWITCH = 51;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 52;
  /** RegularExpression Id. */
  int THIS = 53;
  /** RegularExpression Id. */
  int THROW = 54;
  /** RegularExpression Id. */
  int THROWS = 55;
  /** RegularExpression Id. */
  int TRANSIENT = 56;
  /** RegularExpression Id. */
  int TRUE = 57;
  /** RegularExpression Id. */
  int TRY = 58;
  /** RegularExpression Id. */
  int VOID = 59;
  /** RegularExpression Id. */
  int VOLATILE = 60;
  /** RegularExpression Id. */
  int WHILE = 61;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 62;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 63;
  /** RegularExpression Id. */
  int HEX_LITERAL = 64;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 65;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 66;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 67;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 68;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 69;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 70;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 71;
  /** RegularExpression Id. */
  int STRING_LITERAL = 72;
  /** RegularExpression Id. */
  int IDENTIFIER = 73;
  /** RegularExpression Id. */
  int LETTER = 74;
  /** RegularExpression Id. */
  int PART_LETTER = 75;
  /** RegularExpression Id. */
  int LPAREN = 76;
  /** RegularExpression Id. */
  int RPAREN = 77;
  /** RegularExpression Id. */
  int LBRACE = 78;
  /** RegularExpression Id. */
  int RBRACE = 79;
  /** RegularExpression Id. */
  int LBRACKET = 80;
  /** RegularExpression Id. */
  int RBRACKET = 81;
  /** RegularExpression Id. */
  int SEMICOLON = 82;
  /** RegularExpression Id. */
  int COMMA = 83;
  /** RegularExpression Id. */
  int DOT = 84;
  /** RegularExpression Id. */
  int AT = 85;
  /** RegularExpression Id. */
  int ASSIGN = 86;
  /** RegularExpression Id. */
  int LT = 87;
  /** RegularExpression Id. */
  int BANG = 88;
  /** RegularExpression Id. */
  int TILDE = 89;
  /** RegularExpression Id. */
  int HOOK = 90;
  /** RegularExpression Id. */
  int COLON = 91;
  /** RegularExpression Id. */
  int EQ = 92;
  /** RegularExpression Id. */
  int LE = 93;
  /** RegularExpression Id. */
  int GE = 94;
  /** RegularExpression Id. */
  int NE = 95;
  /** RegularExpression Id. */
  int SC_OR = 96;
  /** RegularExpression Id. */
  int SC_AND = 97;
  /** RegularExpression Id. */
  int INCR = 98;
  /** RegularExpression Id. */
  int DECR = 99;
  /** RegularExpression Id. */
  int PLUS = 100;
  /** RegularExpression Id. */
  int MINUS = 101;
  /** RegularExpression Id. */
  int STAR = 102;
  /** RegularExpression Id. */
  int SLASH = 103;
  /** RegularExpression Id. */
  int BIT_AND = 104;
  /** RegularExpression Id. */
  int BIT_OR = 105;
  /** RegularExpression Id. */
  int XOR = 106;
  /** RegularExpression Id. */
  int REM = 107;
  /** RegularExpression Id. */
  int LSHIFT = 108;
  /** RegularExpression Id. */
  int PLUSASSIGN = 109;
  /** RegularExpression Id. */
  int MINUSASSIGN = 110;
  /** RegularExpression Id. */
  int STARASSIGN = 111;
  /** RegularExpression Id. */
  int SLASHASSIGN = 112;
  /** RegularExpression Id. */
  int ANDASSIGN = 113;
  /** RegularExpression Id. */
  int ORASSIGN = 114;
  /** RegularExpression Id. */
  int XORASSIGN = 115;
  /** RegularExpression Id. */
  int REMASSIGN = 116;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 117;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 118;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 119;
  /** RegularExpression Id. */
  int ELLIPSIS = 120;
  /** RegularExpression Id. */
  int HASH = 121;
  /** RegularExpression Id. */
  int BAD_QUOTE = 122;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "<token of kind 2>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 7>",
    "\"abstract\"",
    "\"assert\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"def\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"strictfp\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"@\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"...\"",
    "\"#\"",
    "\"`\"",
  };

}
